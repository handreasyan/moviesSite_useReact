{"version":3,"sources":["logo.png","Components/Header.js","Components/left-content/selectComponent.js","features/rightContent/genresSlice.js","features/rightContent/genresAPI.js","features/rightContent/editFilmPage/get-film-by-idSlice.js","features/rightContent/editFilmPage/getFilmByIdAPI.js","Components/left-content/Film-for-random-content.js","features/leftContent/topFIlmsAPI.js","features/leftContent/topFilmsSlice.js","Components/left-content/Random-Films-Content.js","Components/left-content/for-teatre.js","Components/left-content/LeftContent.js","Components/right-content/genres-component.js","Components/right-content/all-films-component.js","Components/right-content/RightContent.js","Components/film-edit-content/description_content_item.js","Components/film-edit-content/Film-edit.js","Components/Body_Section.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["Header","className","href","to","src","logo","alt","SelectTag","classNameDate","onChange","date","currentMonth","arr","Array","isArray","map","el","i","value","filter","index","push","event","target","fillAllFilmsByGenre","allFilms","type","payload","allFilmsByGenre","loadGenresAC","dispatch","getState","fetch","then","response","json","data","genres","catch","e","console","log","res","getAllFilmsByGenreAC","id","pageNumber","results","getAllFilmsByGenre","getMostPopularFilmsAC","getMostPopularFilms","SelectGenres","state","allGenresTypes","SelectAllFilmsByGenre","SelectCurrentPageNumber","currentPageNumber","getFilmByIdAC","name","countries","production_countries","companies","production_companies","budget","homepage","title","releaseDate","release_date","tagline","language","original_language","rating","vote_average","image","poster_path","backdrop_path","description","overview","getFilmById","filmData","SelectCurrentFilm","currentEditFilm","SelectCurrentFilmPropsNames","filmPropsNames","SelectCurrentFilmCountryNames","countryNames","FilmForRandom","film","useDispatch","data-movie-id","onClick","style","width","display","fetchSend","url","result","newArr","obj","topFilmsInitial","fillDate","day","Date","getDate","months","getMonth","year","getFullYear","currentDate","month","films","filmsContentTitle","SelectFilms","topFilmsContent","SelectDate","SelectCurrentDate","SelectFilmsContentTitle","fillTopFilmsContentAC","newFilms","loadTopFilmsAC","updateTopFilmsByDateAC","length","updateTopFilmsByDate","RandomFilmsContent","useSelector","useEffect","ForTeatre","useState","changeCurrentDay","setDay","changeCurrentMonth","setMonth","newCurrentDate","LeftContent","GenresComponent","genresArr","data-genre-id","AllFilmsComponent","ev","RightContent","DescriptionContentItem","propsNames","join","FilmEdit","filmDataArr","Object","keys","BodySection","component","path","exact","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","combineReducers","action","zh","da","nl","fi","de","it","ja","ko","no","ru","sv","th","ar","bg","hr","cs","en","iw","hu","pl","pt","sk","sl","tr","uk","vi","sq","af","am","eu","bs","bn","my","ca","et","fa","fr","ka","gu","haw","hi","is","ga","kn","kk","km","lv","lt","lb","mk","ms","ml","mt","mr","sh","ro","rm","sm","sr","es","sw","tl","ta","te","ur","cy","xh","zu","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59cf3de3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6e98d1ff.png\";","import logo from '../logo.png'\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport function Header() {\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <div className=\"logo_content\">\r\n            <NavLink href=\"index.html\" to={'/home'}><img src={logo} alt=\"Logo_img\"/></NavLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}","export function SelectTag({classNameDate,onChange,date,currentMonth}){\r\n\r\n  let arr = [];\r\n  if(Array.isArray(date)) {\r\n\r\n    arr = date.map((el,i)=>{\r\n      return <option value={i} key={i}>{el}</option>\r\n    }).filter((el,index)=>index > currentMonth - 1)\r\n\r\n  } else if(date < 31) {\r\n\r\n    for(let i=date;i<31; i++) arr.push(<option value={i} key={i}>{i}</option>)\r\n\r\n  } else arr = <option value={date}>{date}</option>\r\n\r\n\r\n  return (\r\n    <select className={`dropdown_select ${classNameDate}`}\r\n            onChange={(event)=>onChange(event.target.value) }\r\n    > {arr}</select>\r\n  )\r\n}","\r\nimport {getAllFilmsByGenre, getMostPopularFilms, loadGenres} from \"./genresAPI\";\r\n\r\n\r\nexport function GenresSliceRecuder(state={},action) {\r\n  if(action.type === 'fill-genres'){\r\n    return {...state,genres:action.payload.genres}\r\n  } else if(action.type === 'fill-films-content') {\r\n    return  {...state,allFilmsByGenre:action.payload.allFilmsByGenre}\r\n  }\r\n  return state\r\n}\r\n\r\nexport const initialGenres = {\r\n  genres:[],\r\n  allFilmsByGenre:[],\r\n  currentPageNumber:1,\r\n}\r\n\r\n\r\n//  action creators\r\n\r\nexport function genresFillAC(arr){\r\n  return {\r\n    type:'fill-genres',\r\n    payload:{\r\n      genres:arr\r\n    }\r\n  }\r\n}\r\n\r\nexport function fillAllFilmsByGenre(allFilms){\r\n  return {\r\n    type:'fill-films-content',\r\n    payload:{\r\n      allFilmsByGenre:allFilms\r\n    }\r\n  }\r\n}\r\n\r\nexport function loadGenresAC(){\r\n  return (dispatch,getState)=> {\r\n    loadGenres().then(res=>{\r\n      dispatch(genresFillAC(res))\r\n    })\r\n  }\r\n}\r\nexport function getAllFilmsByGenreAC(id,pageNumber){\r\n  return (dispatch,getState)=> {\r\n    getAllFilmsByGenre(id,pageNumber).then(res=>{\r\n      dispatch(fillAllFilmsByGenre(res))\r\n    })\r\n  }\r\n}\r\n\r\nexport function getMostPopularFilmsAC(pageNumber){\r\n  return (dispatch,getState)=> {\r\n    getMostPopularFilms(pageNumber).then(res=>{\r\n      dispatch(fillAllFilmsByGenre(res))\r\n    })\r\n  }\r\n}\r\n\r\n// selectors\r\nexport const SelectGenres = (state) => state.allGenresTypes.genres\r\nexport const SelectAllFilmsByGenre = (state) => state.allGenresTypes.allFilmsByGenre\r\nexport const SelectCurrentPageNumber = (state) => state.allGenresTypes.currentPageNumber","\r\nexport function loadGenres() {\r\n  return  fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=533c699d20160f1793f6b6802001b0ed`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const result = data.genres\r\n      return result\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n    })\r\n}\r\n\r\nexport function getAllFilmsByGenre(id,pageNumber) {\r\n  return  fetch(`https://api.themoviedb.org/3/discover/movie?with_genres=${id}&page=${pageNumber}&api_key=533c699d20160f1793f6b6802001b0ed`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const result = data.results\r\n      return result\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n    })\r\n}\r\n\r\nexport function getMostPopularFilms(pageNumber) {\r\n  return  fetch(`https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&page=${pageNumber}&api_key=533c699d20160f1793f6b6802001b0ed`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const result = data.results\r\n      return result\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n    })\r\n}","import {getMostPopularFilms} from \"../genresAPI\";\r\nimport {fillAllFilmsByGenre} from \"../genresSlice\";\r\nimport {getFilmById} from \"./getFilmByIdAPI\";\r\n\r\nexport function editFilmReducer(state = {}, action) {\r\n  if (action.type === 'update-current-film-data') {\r\n    return {...state,filmData: action.payload.filmData}\r\n  }\r\n  return state\r\n}\r\n\r\nexport const initialFilmPage = {\r\n  filmData: {\r\n    genres: null,\r\n    budget: null,\r\n    homepage: null,\r\n    title: null,\r\n    countries:null,\r\n    releaseDate: null,\r\n    tagline:null,\r\n    language: null,\r\n    companies: null,\r\n    rating: null,\r\n    image: null,\r\n    description:null\r\n  },\r\n  filmPropsNames: {\r\n    genres: \"Genres\",\r\n      budget: 'Film Budget',\r\n      homepage: \"Home Page\",\r\n      title: \"Movie Name\",\r\n      countries: \"Production Countries\",\r\n      releaseDate: 'Relase Date',\r\n      tagline: \"Tagline\",\r\n      language: \"Original Language\",\r\n      companies: \"Companies\",\r\n      rating: 'Film Rateing: ',\r\n  },\r\n   countryNames : {\r\n    zh: \"Chinese\",\r\n    da: \"Danish\",\r\n    nl: \"Dutch\",\r\n    fi: \"Finnish\",\r\n    de: \"German\",\r\n    it: \"Italian\",\r\n    ja: \"Japanese\",\r\n    ko: \"Korean\",\r\n    no: \"Norwegian\",\r\n    ru: \"Russian\",\r\n    sv: \"Swedish\",\r\n    th: \"Thai\",\r\n    ar: \"Arabic\",\r\n    bg: \"Bulgarian\",\r\n    hr: \"Croatian\",\r\n    cs: \"Czech\",\r\n    en: \"English\",\r\n    el: \"Greek\",\r\n    iw: \"Hebrew\",\r\n    hu: \"Hungarian\",\r\n    pl: \"Polish\",\r\n    pt: \"Portuguese\",\r\n    sk: \"Slovak\",\r\n    sl: \"Slovenian\",\r\n    tr: \"Turkish\",\r\n    uk: \"Ukrainian\",\r\n    vi: \"Vietnamese\",\r\n    sq: \"Albanian\",\r\n    af: \"Afrikaans\",\r\n    am: \"Armenian\",\r\n    eu: \"Basque\",\r\n    bs: \"osnian\",\r\n    bn: \"Bengali\",\r\n    my: \"Burmese\",\r\n    ca: \"Catalan\",\r\n    et: \"Estonian\",\r\n    fa: \"Farsi\",\r\n    fr: \"French'\",\r\n    ka: \"Georgian\",\r\n    gu: \"Gujarati\",\r\n    haw: \"Hawaiian\",\r\n    hi: \"Hindi\",\r\n    is: \"Icelandic\",\r\n    ga: \"Irish\",\r\n    kn: \"Kannada\",\r\n    kk: \"Kazakh\",\r\n    km: \"Khmer\",\r\n    lv: \"Latvian\",\r\n    lt: \"Lithuanian\",\r\n    lb: \"Luxembourgish\",\r\n    mk: \"Macedonian\",\r\n    ms: \"Malay\",\r\n    ml: \"Malayalam\",\r\n    mt: \"Maltese\",\r\n    mr: \"Marathi\",\r\n    sh: \"Montenegrin\",\r\n    ro: \"Romanian\",\r\n    rm: \"Romansh\",\r\n    sm: \"Samoan\",\r\n    sr: \"Serbian\",\r\n    es: \"Spanish\",\r\n    sw: \"Swahili\",\r\n    tl: \"Tagalog\",\r\n    ta: \"Tamil\",\r\n    te: \"Telugu\",\r\n    ur: \"Urdu\",\r\n    cy: \"Welsh\",\r\n    xh: \"Xhosa\",\r\n    zu: \"Zulu\",\r\n  }\r\n}\r\n\r\nexport function updateCurrentFilmAC(data){\r\n  return {\r\n    type:'update-current-film-data',\r\n    payload:{\r\n      filmData:data\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function getFilmByIdAC(id){\r\n  return (dispatch,getState)=> {\r\n    getFilmById(id).then(res=>{\r\n      dispatch(updateCurrentFilmAC(res))\r\n    })\r\n  }\r\n}\r\n\r\nexport const SelectCurrentFilm = (state) => state.currentEditFilm.filmData\r\nexport const SelectCurrentFilmPropsNames = (state) => state.currentEditFilm.filmPropsNames\r\nexport const SelectCurrentFilmCountryNames = (state) => state.currentEditFilm.countryNames\r\n\r\n","export function getFilmById(id){\r\n  return fetch(\r\n    `https://api.themoviedb.org/3/movie/${id}?api_key=533c699d20160f1793f6b6802001b0ed`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const genres = data.genres.map(el=> el.name);\r\n      const countries = data.production_countries.map(el=>el.name)\r\n      const companies = data.production_companies.map(el=>el.name)\r\n      return {\r\n        genres: genres,\r\n        budget: data.budget,\r\n        homepage: data.homepage,\r\n        title: data.title,\r\n        countries: countries,\r\n        releaseDate: data.release_date,\r\n        tagline: data.tagline,\r\n        language: data.original_language,\r\n        companies:companies,\r\n        rating: data.vote_average,\r\n        image:data.poster_path || data.backdrop_path,\r\n        description:data.overview\r\n      }\r\n\r\n    })\r\n    .catch((e) => {\r\n      console.log(e);\r\n    });\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getFilmByIdAC} from \"../../features/rightContent/editFilmPage/get-film-by-idSlice\";\r\n\r\nexport function FilmForRandom({film}) {\r\n  const dispatch  = useDispatch()\r\n  return (\r\n    <div data-movie-id={film.id} className='film_name'\r\n         onClick={(event)=>{\r\n           dispatch(getFilmByIdAC(film.id))\r\n         }} >\r\n      <NavLink to={`/film/id=${film.id}`} style={{width:'100%',display:'inline-block'}}>\r\n        {film.title}\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}\r\n","function fetchSend(url){\r\n  return  fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const result = data.results\r\n      const newArr = []\r\n      for(let obj of result) {\r\n        newArr.push({\r\n          id:obj.id ,\r\n          title:obj.title\r\n        })\r\n      }\r\n      return  newArr\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n    })\r\n}\r\n\r\nexport function loadTopFilms() {\r\n  let topFilmsLoadsPageNumber = 1\r\n  const url  = `https://api.themoviedb.org/3/discover/movie?primary_release_year=${new Date().getFullYear}&page=${topFilmsLoadsPageNumber}&sort_by=vote_average.desc&api_key=533c699d20160f1793f6b6802001b0ed`\r\n\r\n  return fetchSend(url)\r\n\r\n}\r\n\r\nexport function updateTopFilmsByDate(date) {\r\n  let {day,month,year} = date\r\n\r\n  if(day.length < 2) day = \"0\" +  day\r\n  if(month.length < 2) month = \"0\" +  month\r\n\r\n  const url  = `https://api.themoviedb.org/3/discover/movie?primary_release_date.gte=${year}-${month}-${day}&primary_release_date.lte=${year}-${month}-${day}&api_key=533c699d20160f1793f6b6802001b0ed`\r\n\r\n  return fetchSend(url)\r\n}","import {loadTopFilms, updateTopFilmsByDate} from \"./topFIlmsAPI\";\r\n\r\nexport function topFilmsChangeReducer(state={},action){\r\n  // stex karam injvor ifer qnnarkem u yst dra voroshem te 'filmsContentTitle'_um inja grvelu ??\r\n  if(action.type === 'FILL-TOP-FILMS-CONTENT') {\r\n    if(action.payload.films.length === 0) {\r\n      return {...state,films:action.payload.films,filmsContentTitle:'There are no movies in your selected date, please select a different date'}\r\n    }\r\n    return {...state,films:action.payload.films,filmsContentTitle:\"The Best Films of this Year\"}\r\n  } else if(action.type === 'SET-CURRENT-DATE') {\r\n    return  {...state,currentDate:action.payload.newCurrentDate}\r\n  }\r\n  return  state\r\n}\r\n\r\n// initial State\r\nexport const topFilmsInitial = {\r\n  fillDate:{\r\n    day:new Date().getDate() ,\r\n    months:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n    currentMonth:new Date().getMonth(),\r\n    year:new Date().getFullYear()\r\n  },\r\n  currentDate: {\r\n    day:null,\r\n    month:null,\r\n    year:null\r\n  },\r\n  films: [],\r\n  filmsContentTitle:\"The Best Films of this Year\"\r\n}\r\n\r\n\r\n// Selectors\r\nexport const SelectFilms = (state) => state.topFilmsContent.films\r\nexport const SelectDate = (state) => state.topFilmsContent.fillDate\r\nexport const SelectCurrentDate = (state) => state.topFilmsContent.currentDate\r\nexport const SelectFilmsContentTitle = (state) => state.topFilmsContent.filmsContentTitle\r\n\r\n\r\n\r\n// Action Creators\r\n\r\nexport function changeDateAC(newDay,newMonth,newYear){\r\n  return {\r\n    type:'SET-CURRENT-DATE',\r\n    payload: {\r\n      newCurrentDate:{\r\n        day:newDay,\r\n        month:newMonth,\r\n        year:newYear\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function fillTopFilmsContentAC(newFilms){\r\n  return {\r\n    type:'FILL-TOP-FILMS-CONTENT',\r\n    payload: {\r\n      films:newFilms\r\n    }\r\n  }\r\n}\r\n\r\n// Action Creators with thunk\r\nexport function loadTopFilmsAC() {\r\n  return (dispatch,getState)=> {\r\n    loadTopFilms().then(res=>{\r\n      dispatch(fillTopFilmsContentAC(res))\r\n    })\r\n  }\r\n}\r\nexport function updateTopFilmsByDateAC(date) {\r\n  return (dispatch,getState)=> {\r\n    updateTopFilmsByDate(date).then(res=>{\r\n      dispatch(fillTopFilmsContentAC(res))\r\n    })\r\n  }\r\n}","import {FilmForRandom} from \"./Film-for-random-content\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loadTopFilmsAC, SelectFilms, SelectFilmsContentTitle} from \"../../features/leftContent/topFilmsSlice\";\r\nimport {useEffect} from \"react\";\r\nimport {logDOM} from \"@testing-library/react\";\r\n\r\nexport default function RandomFilmsContent() {\r\n\r\n  const films = useSelector(SelectFilms)\r\n  const dispatch = useDispatch();\r\n\r\n  const title = useSelector(SelectFilmsContentTitle)\r\n  useEffect(()=>{\r\n    dispatch(loadTopFilmsAC())\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"films_random_content\">\r\n      <h3>{title}</h3>\r\n      <div className=\"films_random\">\r\n        {\r\n          films.length ? films.map(film=> <FilmForRandom film={film} key={film.id}/>) : \"Ths da.\"\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {SelectTag} from \"./selectComponent\";\r\nimport RandomFilmsContent from \"./Random-Films-Content\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n  SelectDate,\r\n  changeDateAC,\r\n  updateTopFilmsByDateAC, SelectCurrentDate,\r\n} from \"../../features/leftContent/topFilmsSlice\";\r\n\r\nexport function ForTeatre() {\r\n\r\n  const {day,currentMonth,months,year} = useSelector(SelectDate)\r\n  const [changeCurrentDay,setDay] = useState(0);\r\n  const [changeCurrentMonth,setMonth] = useState(0);\r\n  const dispatch = useDispatch()\r\n  const date = useSelector(SelectCurrentDate)\r\n\r\n  useEffect(()=>{\r\n    dispatch(changeDateAC(changeCurrentDay,changeCurrentMonth,year));\r\n  },[changeCurrentDay,changeCurrentMonth])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"for_teatre\">\r\n        <h3>See days examples of films . . .</h3>\r\n\r\n        <div className=\"dropdown_selects\">\r\n\r\n          <SelectTag classNameDate='days_select' date={day} onChange={setDay}/>\r\n          <SelectTag classNameDate='months_select'  date={months} onChange={setMonth} currentMonth={currentMonth}/>\r\n          <SelectTag classNameDate='years_select'  date={year}/>\r\n\r\n        </div>\r\n        <button className=\"search_by_date\" onClick={()=> dispatch(updateTopFilmsByDateAC(date))}\r\n        >Search by Date</button>\r\n      </div>\r\n\r\n      <RandomFilmsContent />\r\n    </>\r\n  )\r\n}","import {ForTeatre} from \"./for-teatre\";\r\n\r\nexport function LeftContent() {\r\n  return (\r\n    <div className={'left-content'}>\r\n      <ForTeatre/>\r\n    </div>\r\n  )\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n  getAllFilmsByGenreAC, getMostPopularFilmsAC,\r\n  loadGenresAC, SelectCurrentPageNumber,\r\n  SelectGenres\r\n} from \"../../features/rightContent/genresSlice\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport function GenresComponent() {\r\n  const dispatch = useDispatch()\r\n  const genresArr = useSelector(SelectGenres)\r\n  const pageNumber = useSelector(SelectCurrentPageNumber)\r\n\r\n  useEffect(()=>{\r\n    dispatch(loadGenresAC())\r\n    dispatch(getMostPopularFilmsAC(pageNumber))\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"all_genres\">\r\n      {\r\n        genresArr.map(obj => {\r\n          return  <span key={obj.id} data-genre-id={obj.id} className='genre_type'\r\n                        onClick={()=>dispatch(getAllFilmsByGenreAC(obj.id,pageNumber))}> {obj.name} </span>\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {SelectAllFilmsByGenre} from \"../../features/rightContent/genresSlice\";\r\nimport {useEffect} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {getFilmByIdAC} from \"../../features/rightContent/editFilmPage/get-film-by-idSlice\";\r\n\r\nexport function AllFilmsComponent() {\r\n\r\n  const arr = useSelector(SelectAllFilmsByGenre)\r\n const dispatch =  useDispatch()\r\n  return (\r\n    <div className=\"all_films\">\r\n      {arr.map(obj=> {\r\n        return(\r\n          <div className='film' key={obj.id} onClick={(ev)=>{\r\n            dispatch(getFilmByIdAC(obj.id))\r\n          }}>\r\n            <NavLink className='coverSpan' data-movie-id={obj.id} to={`/film/id=${obj.id}`}>\r\n              <div className=\"film_image\">\r\n                      <img src={`https://image.tmdb.org/t/p/w500${obj.poster_path || obj.backdrop_path }`} alt=\"Film\"/>\r\n                   </div>\r\n                   <div className=\"film_name\">\r\n                      <h2>{obj.title}</h2>\r\n                   </div>\r\n                   <div className=\"film_desc\">\r\n                      <p>\r\n                        {obj.overview}\r\n                      </p>\r\n                   </div>\r\n            </NavLink>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import {GenresComponent} from \"./genres-component\";\r\nimport {AllFilmsComponent} from \"./all-films-component\";\r\n\r\nexport function RightContent() {\r\n  return (\r\n    <div className={'right-content'}>\r\n      <div className=\"genres_content\">\r\n        <h3>Find Films By Genre</h3>\r\n        <GenresComponent />\r\n      </div>\r\n      <AllFilmsComponent />\r\n    </div>\r\n  )\r\n}","import {useSelector} from \"react-redux\";\r\nimport {\r\n  SelectCurrentFilmCountryNames,\r\n  SelectCurrentFilmPropsNames\r\n} from \"../../features/rightContent/editFilmPage/get-film-by-idSlice\";\r\n\r\nexport function DescriptionContentItem({filmData,data}) {\r\n\r\n  const countries = useSelector(SelectCurrentFilmCountryNames);\r\n  const propsNames = useSelector(SelectCurrentFilmPropsNames)\r\n\r\n  if(data === 'image' || data === \"description\") {\r\n    return null\r\n  }\r\n  return (\r\n    <div className='description_content_item'>\r\n      <b>{propsNames[data]}:</b>\r\n      <span>\r\n        {\r\n          Array.isArray(filmData[data])\r\n            ? filmData[data].join(' , ')\r\n            : data === 'language' ? countries[filmData[data]]\r\n            : data === 'homepage' ? <a href={filmData[data]} target='blank'>Go to {filmData['title']} Home Page </a>\r\n              : filmData[data]\r\n        }\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import {DescriptionContentItem} from './description_content_item'\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n  SelectCurrentFilm\r\n} from \"../../features/rightContent/editFilmPage/get-film-by-idSlice\";\r\n\r\nexport function FilmEdit() {\r\n  const filmData = useSelector(SelectCurrentFilm);\r\n  const filmDataArr = Object.keys(filmData).filter(el => !!filmData[el]);\r\n\r\n  return (\r\n    <div className='film_edit_right_content'>\r\n\r\n      <div className=\"image_content\">\r\n        <img src={`https://image.tmdb.org/t/p/w500${filmData['image']}`} alt=\"Photo has been deleted\"/>\r\n      </div>\r\n\r\n      <div className=\"description_content\">\r\n        {filmDataArr.map((el, i) => {\r\n          return <DescriptionContentItem data={el} filmData={filmData} key={el}/>\r\n        })}\r\n      </div>\r\n\r\n      <div className=\"forMovie\">\r\n        <div className=\"overview\">\r\n          <p>{filmData['description']}</p>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n","import {LeftContent} from \"./left-content/LeftContent\";\r\nimport {RightContent} from \"./right-content/RightContent\";\r\nimport {FilmEdit} from \"./film-edit-content/Film-edit\";\r\nimport { Route} from \"react-router-dom\";\r\n\r\nexport function BodySection() {\r\n  return (\r\n    <section>\r\n      <div className={'container'}>\r\n        <main className={'main'}>\r\n          <LeftContent />\r\n          <Route  component={FilmEdit} path={'/film/'}/>\r\n          <Route exact  component={RightContent} path={'/home'}  />\r\n        </main>\r\n      </div>\r\n    </section>\r\n  )\r\n}","import \"./styles/App.scss\";\r\nimport {Header} from \"./Components/Header\";\r\nimport {BodySection} from \"./Components/Body_Section\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <BodySection/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {topFilmsChangeReducer, topFilmsInitial} from \"../features/leftContent/topFilmsSlice\";\r\nimport {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport {GenresSliceRecuder, initialGenres} from \"../features/rightContent/genresSlice\";\r\nimport {editFilmReducer, initialFilmPage} from \"../features/rightContent/editFilmPage/get-film-by-idSlice\";\r\nconst store = createStore(combineReducers({\r\n  topFilmsContent:topFilmsChangeReducer,\r\n  allGenresTypes:GenresSliceRecuder,\r\n  currentEditFilm:editFilmReducer\r\n}),{\r\n  topFilmsContent:topFilmsInitial,\r\n  allGenresTypes:initialGenres,\r\n  currentEditFilm:initialFilmPage\r\n},applyMiddleware(thunk));\r\n\r\nexport default store\r\n\r\n//GenresSliceRecuder","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App/>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}